/*
bursa

Programmable Cardano Wallet API

API version: v0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BursaKeyFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BursaKeyFile{}

// BursaKeyFile struct for BursaKeyFile
type BursaKeyFile struct {
	CborHex     *string `json:"cborHex,omitempty"`
	Description *string `json:"description,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// NewBursaKeyFile instantiates a new BursaKeyFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBursaKeyFile() *BursaKeyFile {
	this := BursaKeyFile{}
	return &this
}

// NewBursaKeyFileWithDefaults instantiates a new BursaKeyFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBursaKeyFileWithDefaults() *BursaKeyFile {
	this := BursaKeyFile{}
	return &this
}

// GetCborHex returns the CborHex field value if set, zero value otherwise.
func (o *BursaKeyFile) GetCborHex() string {
	if o == nil || IsNil(o.CborHex) {
		var ret string
		return ret
	}
	return *o.CborHex
}

// GetCborHexOk returns a tuple with the CborHex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaKeyFile) GetCborHexOk() (*string, bool) {
	if o == nil || IsNil(o.CborHex) {
		return nil, false
	}
	return o.CborHex, true
}

// HasCborHex returns a boolean if a field has been set.
func (o *BursaKeyFile) HasCborHex() bool {
	if o != nil && !IsNil(o.CborHex) {
		return true
	}

	return false
}

// SetCborHex gets a reference to the given string and assigns it to the CborHex field.
func (o *BursaKeyFile) SetCborHex(v string) {
	o.CborHex = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BursaKeyFile) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaKeyFile) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BursaKeyFile) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BursaKeyFile) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BursaKeyFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaKeyFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BursaKeyFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BursaKeyFile) SetType(v string) {
	o.Type = &v
}

func (o BursaKeyFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BursaKeyFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CborHex) {
		toSerialize["cborHex"] = o.CborHex
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBursaKeyFile struct {
	value *BursaKeyFile
	isSet bool
}

func (v NullableBursaKeyFile) Get() *BursaKeyFile {
	return v.value
}

func (v *NullableBursaKeyFile) Set(val *BursaKeyFile) {
	v.value = val
	v.isSet = true
}

func (v NullableBursaKeyFile) IsSet() bool {
	return v.isSet
}

func (v *NullableBursaKeyFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBursaKeyFile(val *BursaKeyFile) *NullableBursaKeyFile {
	return &NullableBursaKeyFile{value: val, isSet: true}
}

func (v NullableBursaKeyFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBursaKeyFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
bursa

Programmable Cardano Wallet API

API version: v0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultAPI interface {

	/*
		ApiWalletCreateGet Create a wallet

		Create a wallet and return details

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWalletCreateGetRequest
	*/
	ApiWalletCreateGet(ctx context.Context) DefaultAPIApiWalletCreateGetRequest

	// ApiWalletCreateGetExecute executes the request
	//  @return BursaWallet
	ApiWalletCreateGetExecute(
		r DefaultAPIApiWalletCreateGetRequest,
	) (*BursaWallet, *http.Response, error)

	/*
		ApiWalletDeletePost Delete wallet from persistent storage

		Deletes a wallet from persistent storage and optional password.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWalletDeletePostRequest
	*/
	ApiWalletDeletePost(
		ctx context.Context,
	) DefaultAPIApiWalletDeletePostRequest

	// ApiWalletDeletePostExecute executes the request
	//  @return string
	ApiWalletDeletePostExecute(
		r DefaultAPIApiWalletDeletePostRequest,
	) (string, *http.Response, error)

	/*
		ApiWalletGetPost Get wallet from persistent storage

		Gets a wallet from persistent storage and optional password and returns wallet details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWalletGetPostRequest
	*/
	ApiWalletGetPost(ctx context.Context) DefaultAPIApiWalletGetPostRequest

	// ApiWalletGetPostExecute executes the request
	//  @return BursaWallet
	ApiWalletGetPostExecute(
		r DefaultAPIApiWalletGetPostRequest,
	) (*BursaWallet, *http.Response, error)

	/*
		ApiWalletListGet Lists wallets

		List all wallets stored in secret storage matching our prefix

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWalletListGetRequest
	*/
	ApiWalletListGet(ctx context.Context) DefaultAPIApiWalletListGetRequest

	// ApiWalletListGetExecute executes the request
	//  @return []string
	ApiWalletListGetExecute(
		r DefaultAPIApiWalletListGetRequest,
	) ([]string, *http.Response, error)

	/*
		ApiWalletRestorePost Restore a wallet using a mnemonic seed phrase

		Restores a wallet using the provided mnemonic seed phrase and optional password and returns wallet details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWalletRestorePostRequest
	*/
	ApiWalletRestorePost(
		ctx context.Context,
	) DefaultAPIApiWalletRestorePostRequest

	// ApiWalletRestorePostExecute executes the request
	//  @return BursaWallet
	ApiWalletRestorePostExecute(
		r DefaultAPIApiWalletRestorePostRequest,
	) (*BursaWallet, *http.Response, error)

	/*
		ApiWalletUpdatePost Update a wallet in persistent storage

		Updates a wallet from persistent storage and optional password and returns wallet details.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWalletUpdatePostRequest
	*/
	ApiWalletUpdatePost(
		ctx context.Context,
	) DefaultAPIApiWalletUpdatePostRequest

	// ApiWalletUpdatePostExecute executes the request
	//  @return string
	ApiWalletUpdatePostExecute(
		r DefaultAPIApiWalletUpdatePostRequest,
	) (string, *http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPIApiWalletCreateGetRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
}

func (r DefaultAPIApiWalletCreateGetRequest) Execute() (*BursaWallet, *http.Response, error) {
	return r.ApiService.ApiWalletCreateGetExecute(r)
}

/*
ApiWalletCreateGet Create a wallet

# Create a wallet and return details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWalletCreateGetRequest
*/
func (a *DefaultAPIService) ApiWalletCreateGet(
	ctx context.Context,
) DefaultAPIApiWalletCreateGetRequest {
	return DefaultAPIApiWalletCreateGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BursaWallet
func (a *DefaultAPIService) ApiWalletCreateGetExecute(
	r DefaultAPIApiWalletCreateGetRequest,
) (*BursaWallet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BursaWallet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiWalletCreateGet",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/wallet/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiWalletDeletePostRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	request    *ApiWalletDeleteRequest
}

// Wallet Delete Request
func (r DefaultAPIApiWalletDeletePostRequest) Request(
	request ApiWalletDeleteRequest,
) DefaultAPIApiWalletDeletePostRequest {
	r.request = &request
	return r
}

func (r DefaultAPIApiWalletDeletePostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ApiWalletDeletePostExecute(r)
}

/*
ApiWalletDeletePost Delete wallet from persistent storage

Deletes a wallet from persistent storage and optional password.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWalletDeletePostRequest
*/
func (a *DefaultAPIService) ApiWalletDeletePost(
	ctx context.Context,
) DefaultAPIApiWalletDeletePostRequest {
	return DefaultAPIApiWalletDeletePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultAPIService) ApiWalletDeletePostExecute(
	r DefaultAPIApiWalletDeletePostRequest,
) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiWalletDeletePost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/wallet/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError(
			"request is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiWalletGetPostRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	request    *ApiWalletGetRequest
}

// Wallet Restore Request
func (r DefaultAPIApiWalletGetPostRequest) Request(
	request ApiWalletGetRequest,
) DefaultAPIApiWalletGetPostRequest {
	r.request = &request
	return r
}

func (r DefaultAPIApiWalletGetPostRequest) Execute() (*BursaWallet, *http.Response, error) {
	return r.ApiService.ApiWalletGetPostExecute(r)
}

/*
ApiWalletGetPost Get wallet from persistent storage

Gets a wallet from persistent storage and optional password and returns wallet details.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWalletGetPostRequest
*/
func (a *DefaultAPIService) ApiWalletGetPost(
	ctx context.Context,
) DefaultAPIApiWalletGetPostRequest {
	return DefaultAPIApiWalletGetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BursaWallet
func (a *DefaultAPIService) ApiWalletGetPostExecute(
	r DefaultAPIApiWalletGetPostRequest,
) (*BursaWallet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BursaWallet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiWalletGetPost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/wallet/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError(
			"request is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiWalletListGetRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
}

func (r DefaultAPIApiWalletListGetRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ApiWalletListGetExecute(r)
}

/*
ApiWalletListGet Lists wallets

# List all wallets stored in secret storage matching our prefix

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWalletListGetRequest
*/
func (a *DefaultAPIService) ApiWalletListGet(
	ctx context.Context,
) DefaultAPIApiWalletListGetRequest {
	return DefaultAPIApiWalletListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []string
func (a *DefaultAPIService) ApiWalletListGetExecute(
	r DefaultAPIApiWalletListGetRequest,
) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiWalletListGet",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/wallet/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiWalletRestorePostRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	request    *ApiWalletRestoreRequest
}

// Wallet Restore Request
func (r DefaultAPIApiWalletRestorePostRequest) Request(
	request ApiWalletRestoreRequest,
) DefaultAPIApiWalletRestorePostRequest {
	r.request = &request
	return r
}

func (r DefaultAPIApiWalletRestorePostRequest) Execute() (*BursaWallet, *http.Response, error) {
	return r.ApiService.ApiWalletRestorePostExecute(r)
}

/*
ApiWalletRestorePost Restore a wallet using a mnemonic seed phrase

Restores a wallet using the provided mnemonic seed phrase and optional password and returns wallet details.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWalletRestorePostRequest
*/
func (a *DefaultAPIService) ApiWalletRestorePost(
	ctx context.Context,
) DefaultAPIApiWalletRestorePostRequest {
	return DefaultAPIApiWalletRestorePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BursaWallet
func (a *DefaultAPIService) ApiWalletRestorePostExecute(
	r DefaultAPIApiWalletRestorePostRequest,
) (*BursaWallet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BursaWallet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiWalletRestorePost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/wallet/restore"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError(
			"request is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiWalletUpdatePostRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	request    *ApiWalletUpdateRequest
}

// Wallet Update Request
func (r DefaultAPIApiWalletUpdatePostRequest) Request(
	request ApiWalletUpdateRequest,
) DefaultAPIApiWalletUpdatePostRequest {
	r.request = &request
	return r
}

func (r DefaultAPIApiWalletUpdatePostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ApiWalletUpdatePostExecute(r)
}

/*
ApiWalletUpdatePost Update a wallet in persistent storage

Updates a wallet from persistent storage and optional password and returns wallet details.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWalletUpdatePostRequest
*/
func (a *DefaultAPIService) ApiWalletUpdatePost(
	ctx context.Context,
) DefaultAPIApiWalletUpdatePostRequest {
	return DefaultAPIApiWalletUpdatePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultAPIService) ApiWalletUpdatePostExecute(
	r DefaultAPIApiWalletUpdatePostRequest,
) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiWalletUpdatePost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/wallet/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError(
			"request is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
bursa

Programmable Cardano Wallet API

API version: v0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BursaWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BursaWallet{}

// BursaWallet struct for BursaWallet
type BursaWallet struct {
	Mnemonic            *string       `json:"mnemonic,omitempty"`
	PaymentAddress      *string       `json:"payment_address,omitempty"`
	PaymentExtendedSkey *BursaKeyFile `json:"payment_extended_skey,omitempty"`
	PaymentSkey         *BursaKeyFile `json:"payment_skey,omitempty"`
	PaymentVkey         *BursaKeyFile `json:"payment_vkey,omitempty"`
	StakeAddress        *string       `json:"stake_address,omitempty"`
	StakeExtendedSkey   *BursaKeyFile `json:"stake_extended_skey,omitempty"`
	StakeSkey           *BursaKeyFile `json:"stake_skey,omitempty"`
	StakeVkey           *BursaKeyFile `json:"stake_vkey,omitempty"`
}

// NewBursaWallet instantiates a new BursaWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBursaWallet() *BursaWallet {
	this := BursaWallet{}
	return &this
}

// NewBursaWalletWithDefaults instantiates a new BursaWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBursaWalletWithDefaults() *BursaWallet {
	this := BursaWallet{}
	return &this
}

// GetMnemonic returns the Mnemonic field value if set, zero value otherwise.
func (o *BursaWallet) GetMnemonic() string {
	if o == nil || IsNil(o.Mnemonic) {
		var ret string
		return ret
	}
	return *o.Mnemonic
}

// GetMnemonicOk returns a tuple with the Mnemonic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetMnemonicOk() (*string, bool) {
	if o == nil || IsNil(o.Mnemonic) {
		return nil, false
	}
	return o.Mnemonic, true
}

// HasMnemonic returns a boolean if a field has been set.
func (o *BursaWallet) HasMnemonic() bool {
	if o != nil && !IsNil(o.Mnemonic) {
		return true
	}

	return false
}

// SetMnemonic gets a reference to the given string and assigns it to the Mnemonic field.
func (o *BursaWallet) SetMnemonic(v string) {
	o.Mnemonic = &v
}

// GetPaymentAddress returns the PaymentAddress field value if set, zero value otherwise.
func (o *BursaWallet) GetPaymentAddress() string {
	if o == nil || IsNil(o.PaymentAddress) {
		var ret string
		return ret
	}
	return *o.PaymentAddress
}

// GetPaymentAddressOk returns a tuple with the PaymentAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetPaymentAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentAddress) {
		return nil, false
	}
	return o.PaymentAddress, true
}

// HasPaymentAddress returns a boolean if a field has been set.
func (o *BursaWallet) HasPaymentAddress() bool {
	if o != nil && !IsNil(o.PaymentAddress) {
		return true
	}

	return false
}

// SetPaymentAddress gets a reference to the given string and assigns it to the PaymentAddress field.
func (o *BursaWallet) SetPaymentAddress(v string) {
	o.PaymentAddress = &v
}

// GetPaymentExtendedSkey returns the PaymentExtendedSkey field value if set, zero value otherwise.
func (o *BursaWallet) GetPaymentExtendedSkey() BursaKeyFile {
	if o == nil || IsNil(o.PaymentExtendedSkey) {
		var ret BursaKeyFile
		return ret
	}
	return *o.PaymentExtendedSkey
}

// GetPaymentExtendedSkeyOk returns a tuple with the PaymentExtendedSkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetPaymentExtendedSkeyOk() (*BursaKeyFile, bool) {
	if o == nil || IsNil(o.PaymentExtendedSkey) {
		return nil, false
	}
	return o.PaymentExtendedSkey, true
}

// HasPaymentExtendedSkey returns a boolean if a field has been set.
func (o *BursaWallet) HasPaymentExtendedSkey() bool {
	if o != nil && !IsNil(o.PaymentExtendedSkey) {
		return true
	}

	return false
}

// SetPaymentExtendedSkey gets a reference to the given BursaKeyFile and assigns it to the PaymentExtendedSkey field.
func (o *BursaWallet) SetPaymentExtendedSkey(v BursaKeyFile) {
	o.PaymentExtendedSkey = &v
}

// GetPaymentSkey returns the PaymentSkey field value if set, zero value otherwise.
func (o *BursaWallet) GetPaymentSkey() BursaKeyFile {
	if o == nil || IsNil(o.PaymentSkey) {
		var ret BursaKeyFile
		return ret
	}
	return *o.PaymentSkey
}

// GetPaymentSkeyOk returns a tuple with the PaymentSkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetPaymentSkeyOk() (*BursaKeyFile, bool) {
	if o == nil || IsNil(o.PaymentSkey) {
		return nil, false
	}
	return o.PaymentSkey, true
}

// HasPaymentSkey returns a boolean if a field has been set.
func (o *BursaWallet) HasPaymentSkey() bool {
	if o != nil && !IsNil(o.PaymentSkey) {
		return true
	}

	return false
}

// SetPaymentSkey gets a reference to the given BursaKeyFile and assigns it to the PaymentSkey field.
func (o *BursaWallet) SetPaymentSkey(v BursaKeyFile) {
	o.PaymentSkey = &v
}

// GetPaymentVkey returns the PaymentVkey field value if set, zero value otherwise.
func (o *BursaWallet) GetPaymentVkey() BursaKeyFile {
	if o == nil || IsNil(o.PaymentVkey) {
		var ret BursaKeyFile
		return ret
	}
	return *o.PaymentVkey
}

// GetPaymentVkeyOk returns a tuple with the PaymentVkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetPaymentVkeyOk() (*BursaKeyFile, bool) {
	if o == nil || IsNil(o.PaymentVkey) {
		return nil, false
	}
	return o.PaymentVkey, true
}

// HasPaymentVkey returns a boolean if a field has been set.
func (o *BursaWallet) HasPaymentVkey() bool {
	if o != nil && !IsNil(o.PaymentVkey) {
		return true
	}

	return false
}

// SetPaymentVkey gets a reference to the given BursaKeyFile and assigns it to the PaymentVkey field.
func (o *BursaWallet) SetPaymentVkey(v BursaKeyFile) {
	o.PaymentVkey = &v
}

// GetStakeAddress returns the StakeAddress field value if set, zero value otherwise.
func (o *BursaWallet) GetStakeAddress() string {
	if o == nil || IsNil(o.StakeAddress) {
		var ret string
		return ret
	}
	return *o.StakeAddress
}

// GetStakeAddressOk returns a tuple with the StakeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetStakeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.StakeAddress) {
		return nil, false
	}
	return o.StakeAddress, true
}

// HasStakeAddress returns a boolean if a field has been set.
func (o *BursaWallet) HasStakeAddress() bool {
	if o != nil && !IsNil(o.StakeAddress) {
		return true
	}

	return false
}

// SetStakeAddress gets a reference to the given string and assigns it to the StakeAddress field.
func (o *BursaWallet) SetStakeAddress(v string) {
	o.StakeAddress = &v
}

// GetStakeExtendedSkey returns the StakeExtendedSkey field value if set, zero value otherwise.
func (o *BursaWallet) GetStakeExtendedSkey() BursaKeyFile {
	if o == nil || IsNil(o.StakeExtendedSkey) {
		var ret BursaKeyFile
		return ret
	}
	return *o.StakeExtendedSkey
}

// GetStakeExtendedSkeyOk returns a tuple with the StakeExtendedSkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetStakeExtendedSkeyOk() (*BursaKeyFile, bool) {
	if o == nil || IsNil(o.StakeExtendedSkey) {
		return nil, false
	}
	return o.StakeExtendedSkey, true
}

// HasStakeExtendedSkey returns a boolean if a field has been set.
func (o *BursaWallet) HasStakeExtendedSkey() bool {
	if o != nil && !IsNil(o.StakeExtendedSkey) {
		return true
	}

	return false
}

// SetStakeExtendedSkey gets a reference to the given BursaKeyFile and assigns it to the StakeExtendedSkey field.
func (o *BursaWallet) SetStakeExtendedSkey(v BursaKeyFile) {
	o.StakeExtendedSkey = &v
}

// GetStakeSkey returns the StakeSkey field value if set, zero value otherwise.
func (o *BursaWallet) GetStakeSkey() BursaKeyFile {
	if o == nil || IsNil(o.StakeSkey) {
		var ret BursaKeyFile
		return ret
	}
	return *o.StakeSkey
}

// GetStakeSkeyOk returns a tuple with the StakeSkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetStakeSkeyOk() (*BursaKeyFile, bool) {
	if o == nil || IsNil(o.StakeSkey) {
		return nil, false
	}
	return o.StakeSkey, true
}

// HasStakeSkey returns a boolean if a field has been set.
func (o *BursaWallet) HasStakeSkey() bool {
	if o != nil && !IsNil(o.StakeSkey) {
		return true
	}

	return false
}

// SetStakeSkey gets a reference to the given BursaKeyFile and assigns it to the StakeSkey field.
func (o *BursaWallet) SetStakeSkey(v BursaKeyFile) {
	o.StakeSkey = &v
}

// GetStakeVkey returns the StakeVkey field value if set, zero value otherwise.
func (o *BursaWallet) GetStakeVkey() BursaKeyFile {
	if o == nil || IsNil(o.StakeVkey) {
		var ret BursaKeyFile
		return ret
	}
	return *o.StakeVkey
}

// GetStakeVkeyOk returns a tuple with the StakeVkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BursaWallet) GetStakeVkeyOk() (*BursaKeyFile, bool) {
	if o == nil || IsNil(o.StakeVkey) {
		return nil, false
	}
	return o.StakeVkey, true
}

// HasStakeVkey returns a boolean if a field has been set.
func (o *BursaWallet) HasStakeVkey() bool {
	if o != nil && !IsNil(o.StakeVkey) {
		return true
	}

	return false
}

// SetStakeVkey gets a reference to the given BursaKeyFile and assigns it to the StakeVkey field.
func (o *BursaWallet) SetStakeVkey(v BursaKeyFile) {
	o.StakeVkey = &v
}

func (o BursaWallet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BursaWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mnemonic) {
		toSerialize["mnemonic"] = o.Mnemonic
	}
	if !IsNil(o.PaymentAddress) {
		toSerialize["payment_address"] = o.PaymentAddress
	}
	if !IsNil(o.PaymentExtendedSkey) {
		toSerialize["payment_extended_skey"] = o.PaymentExtendedSkey
	}
	if !IsNil(o.PaymentSkey) {
		toSerialize["payment_skey"] = o.PaymentSkey
	}
	if !IsNil(o.PaymentVkey) {
		toSerialize["payment_vkey"] = o.PaymentVkey
	}
	if !IsNil(o.StakeAddress) {
		toSerialize["stake_address"] = o.StakeAddress
	}
	if !IsNil(o.StakeExtendedSkey) {
		toSerialize["stake_extended_skey"] = o.StakeExtendedSkey
	}
	if !IsNil(o.StakeSkey) {
		toSerialize["stake_skey"] = o.StakeSkey
	}
	if !IsNil(o.StakeVkey) {
		toSerialize["stake_vkey"] = o.StakeVkey
	}
	return toSerialize, nil
}

type NullableBursaWallet struct {
	value *BursaWallet
	isSet bool
}

func (v NullableBursaWallet) Get() *BursaWallet {
	return v.value
}

func (v *NullableBursaWallet) Set(val *BursaWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableBursaWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableBursaWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBursaWallet(val *BursaWallet) *NullableBursaWallet {
	return &NullableBursaWallet{value: val, isSet: true}
}

func (v NullableBursaWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBursaWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
